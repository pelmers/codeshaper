{"version":3,"file":"algos_common_ts-algos_entry-node_ts.bundle.js","sources":["webpack:///../node_modules/node-canvas/browser.js","webpack:///../node_modules/node-canvas/lib/parse-font.js","webpack:///./algos/common.ts","webpack:///./algos/entry-node.ts"],"sourcesContent":["/* globals document, ImageData */\n\nconst parseFont = require('./lib/parse-font')\n\nexports.parseFont = parseFont\n\nexports.createCanvas = function (width, height) {\n  return Object.assign(document.createElement('canvas'), { width: width, height: height })\n}\n\nexports.createImageData = function (array, width, height) {\n  // Browser implementation of ImageData looks at the number of arguments passed\n  switch (arguments.length) {\n    case 0: return new ImageData()\n    case 1: return new ImageData(array)\n    case 2: return new ImageData(array, width)\n    default: return new ImageData(array, width, height)\n  }\n}\n\nexports.loadImage = function (src, options) {\n  return new Promise(function (resolve, reject) {\n    const image = Object.assign(document.createElement('img'), options)\n\n    function cleanup () {\n      image.onload = null\n      image.onerror = null\n    }\n\n    image.onload = function () { cleanup(); resolve(image) }\n    image.onerror = function () { cleanup(); reject(new Error('Failed to load the image \"' + src + '\"')) }\n\n    image.src = src\n  })\n}\n","'use strict'\n\n/**\n * Font RegExp helpers.\n */\n\nconst weights = 'bold|bolder|lighter|[1-9]00'\nconst styles = 'italic|oblique'\nconst variants = 'small-caps'\nconst stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'\nconst units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q'\nconst string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'\n\n// [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\nconst weightRe = new RegExp(`(${weights}) +`, 'i')\nconst styleRe = new RegExp(`(${styles}) +`, 'i')\nconst variantRe = new RegExp(`(${variants}) +`, 'i')\nconst stretchRe = new RegExp(`(${stretches}) +`, 'i')\nconst sizeFamilyRe = new RegExp(\n  `([\\\\d\\\\.]+)(${units}) *((?:${string})( *, *(?:${string}))*)`)\n\n/**\n * Cache font parsing.\n */\n\nconst cache = {}\n\nconst defaultHeight = 16 // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = str => {\n  // Cached\n  if (cache[str]) return cache[str]\n\n  // Try for required properties first.\n  const sizeFamily = sizeFamilyRe.exec(str)\n  if (!sizeFamily) return // invalid\n\n  // Default values and required properties\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }\n\n  // Optional, unordered properties.\n  let weight, style, variant, stretch\n  // Stop search at `sizeFamily.index`\n  const substr = str.substring(0, sizeFamily.index)\n  if ((weight = weightRe.exec(substr))) font.weight = weight[1]\n  if ((style = styleRe.exec(substr))) font.style = style[1]\n  if ((variant = variantRe.exec(substr))) font.variant = variant[1]\n  if ((stretch = stretchRe.exec(substr))) font.stretch = stretch[1]\n\n  // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75\n      break\n    case 'pc':\n      font.size *= 16\n      break\n    case 'in':\n      font.size *= 96\n      break\n    case 'cm':\n      font.size *= 96.0 / 2.54\n      break\n    case 'mm':\n      font.size *= 96.0 / 25.4\n      break\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75\n      break\n    case 'q':\n      font.size *= 96 / 25.4 / 4\n      break\n  }\n\n  return (cache[str] = font)\n}\n","import { ModeType } from '../constants';\n\nexport function modeDescription(mode: ModeType): string {\n    return {\n        intensity: 'Intensity (faster)',\n        saliency: 'Saliency (slower)',\n    }[mode];\n}\n\nexport function extractRunsByCutoff(\n    width: number,\n    height: number,\n    passesCutoff: (row: number, column: number) => boolean\n) {\n    // compute 'runs' of pixels > cutoff in the image rows to use as line widths\n    const runs: number[][] = [];\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const i = row * width + col;\n            if (passesCutoff(row, col)) {\n                // Decide whether we're still on the last run, or make a new one\n                if (\n                    runs.length > 0 &&\n                    col > 0 &&\n                    runs[runs.length - 1][runs[runs.length - 1].length - 1] === i - 1\n                ) {\n                    runs[runs.length - 1].push(i);\n                } else {\n                    runs.push([i]);\n                }\n            }\n        }\n    }\n    return runs;\n}\n","import { createCanvas, loadImage } from 'node-canvas';\nimport { DEFAULT_HEIGHT_WIDTH_RATIO, ModeType } from '../constants';\nimport { drawCodeCommon } from './drawCode';\n\nasync function loadImageToCanvas(imageFilePath: string, targetSize: number) {\n    const image = await loadImage(imageFilePath);\n    // Find the ratio to get from source dimensions to target size\n    // math check: e.g. target = 16, s.w = s.h = 2, then ratio = 2 as expected\n    const ratio = Math.sqrt(targetSize / (image.width * image.height));\n    const targetWidth = Math.round(\n        image.width * ratio * Math.sqrt(DEFAULT_HEIGHT_WIDTH_RATIO)\n    );\n    const targetHeight = Math.round(\n        (image.height * ratio) / Math.sqrt(DEFAULT_HEIGHT_WIDTH_RATIO)\n    );\n\n    const target = createCanvas(targetWidth, targetHeight);\n    const ctx = target.getContext('2d')!;\n    ctx.drawImage(image, 0, 0, target.width, target.height);\n    return { canvas: target, ctx: ctx as CanvasRenderingContext2D };\n}\n\nexport async function drawCode(\n    code: string,\n    imageFileUri: string,\n    mode: ModeType,\n    cutoff: number,\n    invert: boolean\n): Promise<string> {\n    return drawCodeCommon(code, imageFileUri, mode, cutoff, invert, loadImageToCanvas);\n}\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;ACppGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAOA;AACA;AAAA;AACA;AACA;A;;A","sourceRoot":""}